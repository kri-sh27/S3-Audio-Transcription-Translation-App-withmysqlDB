name: CI/CD Pipeline for Streamlit App to EC2 (Docker Hub)

on:
  push:
    branches:
      - main  # or your desired branch

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx # Add this step to set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_PUBLIC_DNS }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          # script: |
          #   # Pull the latest image from Docker Hub
          #   sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest

          #   # Stop and remove the existing container if running
          #   sudo docker stop my-streamlit-app || true
          #   sudo docker rm my-streamlit-app || true

          #   # Run the new container with environment variables, including MySQL credentials
          #   sudo docker run -d \
          #     -p 8501:8501 \
          #     --name my-streamlit-app \
          #     -e MYSQL_HOST="${{ secrets.MYSQL_HOST }}" \
          #     -e MYSQL_USER="${{ secrets.MYSQL_USERNAME }}" \
          #     -e MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD }}" \
          #     -e MYSQL_DATABASE="${{ secrets.MYSQL_DATABASE_NAME }}" \
          #     -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
          #     -e S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}" \
          #     -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          #     -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          #     ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest
          # script: |
          #   # Pull the latest image from Docker Hub
          #   sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest

          #   # Check if a container with the same name exists and stop/remove it
          #   if [ "$(sudo docker ps -q -f name=my-streamlit-app)" ]; then
          #       echo "Stopping and removing existing container 'my-streamlit-app'..."
          #       sudo docker stop my-streamlit-app
          #       sudo docker rm my-streamlit-app
          #   fi

          #   # Check if any other container is using port 8501 and stop/remove it (more aggressive)
          #   if [ "$(sudo docker ps -q -f expose=8501)" ]; then
          #       echo "Stopping and removing container using port 8501..."
          #       CONTAINER_ID_USING_PORT=$(sudo docker ps -q -f expose=8501)
          #       sudo docker stop $CONTAINER_ID_USING_PORT
          #       sudo docker rm $CONTAINER_ID_USING_PORT
          #   fi

          #   # Run the new container with environment variables
          #   sudo docker run -d \
          #     -p 8501:8501 \
          #     --name my-streamlit-app \
          #     -e MYSQL_HOST="${{ secrets.MYSQL_HOST }}" \
          #     -e MYSQL_USER="${{ secrets.MYSQL_USERNAME }}" \
          #     -e MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD }}" \
          #     -e MYSQL_DATABASE="${{ secrets.MYSQL_DATABASE_NAME }}" \
          #     -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
          #     -e S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}" \
          #     -e AWS_ACCESS_KEY_ID="${{ secrets.S3_ACCESS_KEY_ID }}" \
          #     -e AWS_SECRET_ACCESS_KEY="${{ secrets.S3_SECRET_ACCESS_KEY }}" \
          #     ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest
          # script: |
          #   # Pull the latest image from Docker Hub
          #   sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest

          #   # Check if a container with the name 'my-streamlit-app' exists
          #   if [ "$(sudo docker ps -aq -f name=my-streamlit-app)" ]; then
          #       echo "Container 'my-streamlit-app' exists. Stopping and removing it..."
          #       # Stop the container if it's running
          #       sudo docker stop my-streamlit-app || true
          #       # Remove the container
          #       sudo docker rm my-streamlit-app || true
          #   else
          #       echo "No existing container named 'my-streamlit-app' found. Proceeding."
          #   fi

          #   # Check if any container is using port 8501 and stop/remove it (optional, but good for "address already in use" if it reappears)
          #   # This check uses 'docker ps -q -f publish=8501', which explicitly looks for published ports.
          #   # Replace 'publish' with 'expose' if you only expose the port in the Dockerfile without publishing it.
          #   if [ "$(sudo docker ps -q -f publish=8501)" ]; then
          #       echo "Stopping and removing container using published port 8501..."
          #       CONTAINER_ID_USING_PORT=$(sudo docker ps -q -f publish=8501)
          #       sudo docker stop $CONTAINER_ID_USING_PORT || true
          #       sudo docker rm $CONTAINER_ID_USING_PORT || true
          #   fi


          #   # Run the new container with environment variables
          #   sudo docker run -d \
          #     -p 8501:8501 \
          #     --name my-streamlit-app \
          #     -e MYSQL_HOST="${{ secrets.MYSQL_HOST }}" \
          #     -e MYSQL_USER="${{ secrets.MYSQL_USERNAME }}" \
          #     -e MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD }}" \
          #     -e MYSQL_DATABASE="${{ secrets.MYSQL_DATABASE_NAME }}" \
          #     -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
          #     -e S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}" \
          #     -e AWS_ACCESS_KEY_ID="${{ secrets.S3_ACCESS_KEY_ID }}" \
          #     -e AWS_SECRET_ACCESS_KEY="${{ secrets.S3_SECRET_ACCESS_KEY }}" \
          #     ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest
          script: |
            echo "Pulling latest image..."
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest

            echo "Stopping/removing existing container if it exists..."
            if [ "$(sudo docker ps -aq -f name=my-streamlit-app)" ]; then
                sudo docker stop my-streamlit-app || true
                sudo docker rm my-streamlit-app || true
            fi

            echo "Checking if any other container is publishing port 8501..."
            if [ "$(sudo docker ps -q -f publish=8501)" ]; then
                CONTAINER_ID_USING_PORT=$(sudo docker ps -q -f publish=8501)
                echo "Stopping and removing container $CONTAINER_ID_USING_PORT using port 8501..."
                sudo docker stop $CONTAINER_ID_USING_PORT || true
                sudo docker rm $CONTAINER_ID_USING_PORT || true
            fi

            echo "Forcefully killing any process on port 8501 (just in case)..."
            sudo fuser -k 8501/tcp || true

            echo "Running new container..."
            sudo docker run -d \
              --network host \
              --name my-streamlit-app \
              -e MYSQL_HOST="127.0.0.1" \
              -e MYSQL_USER="${{ secrets.MYSQL_USERNAME }}" \
              -e MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD }}" \
              -e MYSQL_DATABASE="${{ secrets.MYSQL_DATABASE_NAME }}" \
              -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              -e S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}" \
              -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
              -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              -e AWS_REGION="${{ secrets.AWS_REGION }}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:latest

                  